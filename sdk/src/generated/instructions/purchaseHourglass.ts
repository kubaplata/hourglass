/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PurchaseHourglass
 * @category generated
 */
export type PurchaseHourglassInstructionArgs = {
  hourglassId: beet.bignum
}
/**
 * @category Instructions
 * @category PurchaseHourglass
 * @category generated
 */
export const purchaseHourglassStruct = new beet.BeetArgsStruct<
  PurchaseHourglassInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['hourglassId', beet.u64],
  ],
  'PurchaseHourglassInstructionArgs'
)
/**
 * Accounts required by the _purchaseHourglass_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] seller
 * @property [_writable_] hourglassAssociatedAccount
 * @property [_writable_] hourglassMint
 * @property [_writable_] userHourglassAta
 * @property [_writable_] sellerHourglassAta
 * @property [_writable_] creatorHourglassAccount
 * @property [_writable_] creator
 * @property [_writable_] userTaxAccount
 * @property [_writable_] hourglassVault
 * @property [_writable_] currentThread
 * @property [] clockworkProgram
 * @category Instructions
 * @category PurchaseHourglass
 * @category generated
 */
export type PurchaseHourglassInstructionAccounts = {
  user: web3.PublicKey
  seller: web3.PublicKey
  hourglassAssociatedAccount: web3.PublicKey
  hourglassMint: web3.PublicKey
  userHourglassAta: web3.PublicKey
  sellerHourglassAta: web3.PublicKey
  creatorHourglassAccount: web3.PublicKey
  creator: web3.PublicKey
  userTaxAccount: web3.PublicKey
  hourglassVault: web3.PublicKey
  currentThread: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clockworkProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const purchaseHourglassInstructionDiscriminator = [
  19, 143, 84, 148, 105, 140, 166, 217,
]

/**
 * Creates a _PurchaseHourglass_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PurchaseHourglass
 * @category generated
 */
export function createPurchaseHourglassInstruction(
  accounts: PurchaseHourglassInstructionAccounts,
  args: PurchaseHourglassInstructionArgs,
  programId = new web3.PublicKey('83PYe3dvbceG6KH98pewdyxLfhLFTHQUc8sjJXiKAcij')
) {
  const [data] = purchaseHourglassStruct.serialize({
    instructionDiscriminator: purchaseHourglassInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.seller,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hourglassAssociatedAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hourglassMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userHourglassAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerHourglassAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorHourglassAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userTaxAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hourglassVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.currentThread,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clockworkProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
