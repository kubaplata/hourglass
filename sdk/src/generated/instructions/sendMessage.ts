/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SendMessage
 * @category generated
 */
export type SendMessageInstructionArgs = {
  hourglassId: beet.bignum
  messageId: beet.bignum
  messageContent: string
}
/**
 * @category Instructions
 * @category SendMessage
 * @category generated
 */
export const sendMessageStruct = new beet.FixableBeetArgsStruct<
  SendMessageInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['hourglassId', beet.u64],
    ['messageId', beet.u64],
    ['messageContent', beet.utf8String],
  ],
  'SendMessageInstructionArgs'
)
/**
 * Accounts required by the _sendMessage_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] hourglassAssociatedAccount
 * @property [_writable_] message
 * @category Instructions
 * @category SendMessage
 * @category generated
 */
export type SendMessageInstructionAccounts = {
  user: web3.PublicKey
  hourglassAssociatedAccount: web3.PublicKey
  message: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const sendMessageInstructionDiscriminator = [
  57, 40, 34, 178, 189, 10, 65, 26,
]

/**
 * Creates a _SendMessage_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SendMessage
 * @category generated
 */
export function createSendMessageInstruction(
  accounts: SendMessageInstructionAccounts,
  args: SendMessageInstructionArgs,
  programId = new web3.PublicKey('83PYe3dvbceG6KH98pewdyxLfhLFTHQUc8sjJXiKAcij')
) {
  const [data] = sendMessageStruct.serialize({
    instructionDiscriminator: sendMessageInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.hourglassAssociatedAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.message,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
