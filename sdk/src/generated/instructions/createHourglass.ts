/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateHourglass
 * @category generated
 */
export type CreateHourglassInstructionArgs = {
  hourglassId: beet.bignum
  name: string
  symbol: string
  metadataUri: string
  description: string
  image: string
  creatorName: string
  service: boolean[] /* size: 8 */
  isPublic: boolean
  auctionLength: beet.bignum
  ownershipPeriod: beet.bignum
  gracePeriod: beet.bignum
  minimumSalePrice: beet.bignum
  minimumBid: beet.bignum
  taxRate: beet.bignum
  royalties: beet.bignum
}
/**
 * @category Instructions
 * @category CreateHourglass
 * @category generated
 */
export const createHourglassStruct = new beet.FixableBeetArgsStruct<
  CreateHourglassInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['hourglassId', beet.u64],
    ['name', beet.utf8String],
    ['symbol', beet.utf8String],
    ['metadataUri', beet.utf8String],
    ['description', beet.utf8String],
    ['image', beet.utf8String],
    ['creatorName', beet.utf8String],
    ['service', beet.uniformFixedSizeArray(beet.bool, 8)],
    ['isPublic', beet.bool],
    ['auctionLength', beet.u64],
    ['ownershipPeriod', beet.u64],
    ['gracePeriod', beet.u64],
    ['minimumSalePrice', beet.u64],
    ['minimumBid', beet.u64],
    ['taxRate', beet.u64],
    ['royalties', beet.u64],
  ],
  'CreateHourglassInstructionArgs'
)
/**
 * Accounts required by the _createHourglass_ instruction
 *
 * @property [_writable_, **signer**] creator
 * @property [_writable_, **signer**] hourglassMint
 * @property [_writable_] hourglassProtocol
 * @property [_writable_] creatorHourglassAccount
 * @property [_writable_] hourglassAssociatedAccount
 * @property [_writable_] hourglassVault
 * @property [_writable_] feeSettlementToken
 * @property [_writable_] creatorFeeSettlementTokenAccount
 * @property [] associatedTokenProgram
 * @property [] rentProgram
 * @category Instructions
 * @category CreateHourglass
 * @category generated
 */
export type CreateHourglassInstructionAccounts = {
  creator: web3.PublicKey
  hourglassMint: web3.PublicKey
  hourglassProtocol: web3.PublicKey
  creatorHourglassAccount: web3.PublicKey
  hourglassAssociatedAccount: web3.PublicKey
  hourglassVault: web3.PublicKey
  feeSettlementToken: web3.PublicKey
  creatorFeeSettlementTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  rentProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createHourglassInstructionDiscriminator = [
  98, 133, 227, 4, 89, 113, 162, 69,
]

/**
 * Creates a _CreateHourglass_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateHourglass
 * @category generated
 */
export function createCreateHourglassInstruction(
  accounts: CreateHourglassInstructionAccounts,
  args: CreateHourglassInstructionArgs,
  programId = new web3.PublicKey('83PYe3dvbceG6KH98pewdyxLfhLFTHQUc8sjJXiKAcij')
) {
  const [data] = createHourglassStruct.serialize({
    instructionDiscriminator: createHourglassInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.hourglassMint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.hourglassProtocol,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorHourglassAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hourglassAssociatedAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hourglassVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeSettlementToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorFeeSettlementTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
