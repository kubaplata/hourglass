/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link HourglassAssociatedAccount}
 * @category Accounts
 * @category generated
 */
export type HourglassAssociatedAccountArgs = {
  hourglass: web3.PublicKey
  creator: web3.PublicKey
  settlementToken: web3.PublicKey
  auctionLength: beet.bignum
  ownershipPeriod: beet.bignum
  gracePeriod: beet.bignum
  minimumSalePrice: beet.bignum
  minimumBid: beet.bignum
  taxRateBps: beet.bignum
  nextAuctionId: beet.bignum
  currentOwner: web3.PublicKey
  currentPrice: beet.bignum
  ownedTill: beet.bignum
  graceTill: beet.bignum
  ownershipPeriodIndex: beet.bignum
  royalties: beet.bignum
  messageId: beet.bignum
}

export const hourglassAssociatedAccountDiscriminator = [
  244, 98, 244, 176, 83, 46, 242, 63,
]
/**
 * Holds the data for the {@link HourglassAssociatedAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class HourglassAssociatedAccount
  implements HourglassAssociatedAccountArgs
{
  private constructor(
    readonly hourglass: web3.PublicKey,
    readonly creator: web3.PublicKey,
    readonly settlementToken: web3.PublicKey,
    readonly auctionLength: beet.bignum,
    readonly ownershipPeriod: beet.bignum,
    readonly gracePeriod: beet.bignum,
    readonly minimumSalePrice: beet.bignum,
    readonly minimumBid: beet.bignum,
    readonly taxRateBps: beet.bignum,
    readonly nextAuctionId: beet.bignum,
    readonly currentOwner: web3.PublicKey,
    readonly currentPrice: beet.bignum,
    readonly ownedTill: beet.bignum,
    readonly graceTill: beet.bignum,
    readonly ownershipPeriodIndex: beet.bignum,
    readonly royalties: beet.bignum,
    readonly messageId: beet.bignum
  ) {}

  /**
   * Creates a {@link HourglassAssociatedAccount} instance from the provided args.
   */
  static fromArgs(args: HourglassAssociatedAccountArgs) {
    return new HourglassAssociatedAccount(
      args.hourglass,
      args.creator,
      args.settlementToken,
      args.auctionLength,
      args.ownershipPeriod,
      args.gracePeriod,
      args.minimumSalePrice,
      args.minimumBid,
      args.taxRateBps,
      args.nextAuctionId,
      args.currentOwner,
      args.currentPrice,
      args.ownedTill,
      args.graceTill,
      args.ownershipPeriodIndex,
      args.royalties,
      args.messageId
    )
  }

  /**
   * Deserializes the {@link HourglassAssociatedAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [HourglassAssociatedAccount, number] {
    return HourglassAssociatedAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link HourglassAssociatedAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<HourglassAssociatedAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find HourglassAssociatedAccount account at ${address}`
      )
    }
    return HourglassAssociatedAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HEwZhZFUgMAxHe5uP1jVRGKhNxdD7qZsoiypyifGrNq6'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(
      programId,
      hourglassAssociatedAccountBeet
    )
  }

  /**
   * Deserializes the {@link HourglassAssociatedAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(
    buf: Buffer,
    offset = 0
  ): [HourglassAssociatedAccount, number] {
    return hourglassAssociatedAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link HourglassAssociatedAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return hourglassAssociatedAccountBeet.serialize({
      accountDiscriminator: hourglassAssociatedAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link HourglassAssociatedAccount}
   */
  static get byteSize() {
    return hourglassAssociatedAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link HourglassAssociatedAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      HourglassAssociatedAccount.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link HourglassAssociatedAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === HourglassAssociatedAccount.byteSize
  }

  /**
   * Returns a readable version of {@link HourglassAssociatedAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      hourglass: this.hourglass.toBase58(),
      creator: this.creator.toBase58(),
      settlementToken: this.settlementToken.toBase58(),
      auctionLength: (() => {
        const x = <{ toNumber: () => number }>this.auctionLength
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      ownershipPeriod: (() => {
        const x = <{ toNumber: () => number }>this.ownershipPeriod
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      gracePeriod: (() => {
        const x = <{ toNumber: () => number }>this.gracePeriod
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minimumSalePrice: (() => {
        const x = <{ toNumber: () => number }>this.minimumSalePrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minimumBid: (() => {
        const x = <{ toNumber: () => number }>this.minimumBid
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      taxRateBps: (() => {
        const x = <{ toNumber: () => number }>this.taxRateBps
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      nextAuctionId: (() => {
        const x = <{ toNumber: () => number }>this.nextAuctionId
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      currentOwner: this.currentOwner.toBase58(),
      currentPrice: (() => {
        const x = <{ toNumber: () => number }>this.currentPrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      ownedTill: (() => {
        const x = <{ toNumber: () => number }>this.ownedTill
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      graceTill: (() => {
        const x = <{ toNumber: () => number }>this.graceTill
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      ownershipPeriodIndex: (() => {
        const x = <{ toNumber: () => number }>this.ownershipPeriodIndex
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      royalties: (() => {
        const x = <{ toNumber: () => number }>this.royalties
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      messageId: (() => {
        const x = <{ toNumber: () => number }>this.messageId
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const hourglassAssociatedAccountBeet = new beet.BeetStruct<
  HourglassAssociatedAccount,
  HourglassAssociatedAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['hourglass', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['settlementToken', beetSolana.publicKey],
    ['auctionLength', beet.u64],
    ['ownershipPeriod', beet.u64],
    ['gracePeriod', beet.u64],
    ['minimumSalePrice', beet.u64],
    ['minimumBid', beet.u64],
    ['taxRateBps', beet.u64],
    ['nextAuctionId', beet.u64],
    ['currentOwner', beetSolana.publicKey],
    ['currentPrice', beet.u64],
    ['ownedTill', beet.u64],
    ['graceTill', beet.u64],
    ['ownershipPeriodIndex', beet.u64],
    ['royalties', beet.u64],
    ['messageId', beet.u64],
  ],
  HourglassAssociatedAccount.fromArgs,
  'HourglassAssociatedAccount'
)
