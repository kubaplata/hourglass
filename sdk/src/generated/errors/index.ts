/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidHoourglassID: 'Invalid Hourglass ID. Make sure Hourglass ID matches total_hourglass field in main Hourglass Protocol PDA.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidHoourglassIDError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidHoourglassID'
  constructor() {
    super(
      'Invalid Hourglass ID. Make sure Hourglass ID matches total_hourglass field in main Hourglass Protocol PDA.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidHoourglassIDError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidHoourglassIDError())
createErrorFromNameLookup.set(
  'InvalidHoourglassID',
  () => new InvalidHoourglassIDError()
)

/**
 * InvalidSigners: 'Invalid signers. Make sure Hourglass mint is signing the transaction.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignersError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidSigners'
  constructor() {
    super(
      'Invalid signers. Make sure Hourglass mint is signing the transaction.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidSignersError())
createErrorFromNameLookup.set('InvalidSigners', () => new InvalidSignersError())

/**
 * BidTooLow: 'Bid value is too low.'
 *
 * @category Errors
 * @category generated
 */
export class BidTooLowError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'BidTooLow'
  constructor() {
    super('Bid value is too low.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BidTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new BidTooLowError())
createErrorFromNameLookup.set('BidTooLow', () => new BidTooLowError())

/**
 * CannotCancelWinningBid: 'Winning bid cannot be cancelled.'
 *
 * @category Errors
 * @category generated
 */
export class CannotCancelWinningBidError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CannotCancelWinningBid'
  constructor() {
    super('Winning bid cannot be cancelled.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCancelWinningBidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new CannotCancelWinningBidError())
createErrorFromNameLookup.set(
  'CannotCancelWinningBid',
  () => new CannotCancelWinningBidError()
)

/**
 * AuctionClaimed: 'Auction already claimed.'
 *
 * @category Errors
 * @category generated
 */
export class AuctionClaimedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'AuctionClaimed'
  constructor() {
    super('Auction already claimed.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AuctionClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new AuctionClaimedError())
createErrorFromNameLookup.set('AuctionClaimed', () => new AuctionClaimedError())

/**
 * AuctionRunning: 'Auction has not been ended yet.'
 *
 * @category Errors
 * @category generated
 */
export class AuctionRunningError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'AuctionRunning'
  constructor() {
    super('Auction has not been ended yet.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AuctionRunningError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new AuctionRunningError())
createErrorFromNameLookup.set('AuctionRunning', () => new AuctionRunningError())

/**
 * WinnerMismatch: 'This user is not authorized to claim the auction.'
 *
 * @category Errors
 * @category generated
 */
export class WinnerMismatchError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'WinnerMismatch'
  constructor() {
    super('This user is not authorized to claim the auction.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WinnerMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new WinnerMismatchError())
createErrorFromNameLookup.set('WinnerMismatch', () => new WinnerMismatchError())

/**
 * OwnershipPeriodEnded: 'Ownership period for this user has ended.'
 *
 * @category Errors
 * @category generated
 */
export class OwnershipPeriodEndedError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'OwnershipPeriodEnded'
  constructor() {
    super('Ownership period for this user has ended.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OwnershipPeriodEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new OwnershipPeriodEndedError())
createErrorFromNameLookup.set(
  'OwnershipPeriodEnded',
  () => new OwnershipPeriodEndedError()
)

/**
 * OwnershipPeriodNotEnded: 'Ownership period has not ended yet. Tax cannot be validated before the end of ownership period.'
 *
 * @category Errors
 * @category generated
 */
export class OwnershipPeriodNotEndedError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'OwnershipPeriodNotEnded'
  constructor() {
    super(
      'Ownership period has not ended yet. Tax cannot be validated before the end of ownership period.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OwnershipPeriodNotEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new OwnershipPeriodNotEndedError())
createErrorFromNameLookup.set(
  'OwnershipPeriodNotEnded',
  () => new OwnershipPeriodNotEndedError()
)

/**
 * InvalidMessageOrder: 'Invalid message ID provided in the instruction. Messages have to be inserted in a correct order.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMessageOrderError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidMessageOrder'
  constructor() {
    super(
      'Invalid message ID provided in the instruction. Messages have to be inserted in a correct order.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMessageOrderError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidMessageOrderError())
createErrorFromNameLookup.set(
  'InvalidMessageOrder',
  () => new InvalidMessageOrderError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
