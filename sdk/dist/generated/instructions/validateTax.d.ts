/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category ValidateTax
 * @category generated
 */
export type ValidateTaxInstructionArgs = {
    hourglassId: beet.bignum;
    user: web3.PublicKey;
};
/**
 * @category Instructions
 * @category ValidateTax
 * @category generated
 */
export declare const validateTaxStruct: beet.BeetArgsStruct<ValidateTaxInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _validateTax_ instruction
 *
 * @property [_writable_] hourglassAssociatedAccount
 * @property [_writable_] userTaxAccount
 * @property [_writable_] hourglassVault
 * @property [_writable_] hourglassMint
 * @property [_writable_] hourglassOwnerAta
 * @category Instructions
 * @category ValidateTax
 * @category generated
 */
export type ValidateTaxInstructionAccounts = {
    hourglassAssociatedAccount: web3.PublicKey;
    userTaxAccount: web3.PublicKey;
    hourglassVault: web3.PublicKey;
    hourglassMint: web3.PublicKey;
    hourglassOwnerAta: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const validateTaxInstructionDiscriminator: number[];
/**
 * Creates a _ValidateTax_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ValidateTax
 * @category generated
 */
export declare function createValidateTaxInstruction(accounts: ValidateTaxInstructionAccounts, args: ValidateTaxInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
