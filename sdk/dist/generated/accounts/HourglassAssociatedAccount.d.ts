/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * Arguments used to create {@link HourglassAssociatedAccount}
 * @category Accounts
 * @category generated
 */
export type HourglassAssociatedAccountArgs = {
    service: boolean[];
    isPublic: boolean;
    auctionLength: beet.bignum;
    ownershipPeriod: beet.bignum;
    gracePeriod: beet.bignum;
    minimumSalePrice: beet.bignum;
    minimumBid: beet.bignum;
    taxRate: beet.bignum;
    hourglass: web3.PublicKey;
    creator: web3.PublicKey;
    nextAuctionId: beet.bignum;
    currentOwner: web3.PublicKey;
    currentPrice: beet.bignum;
    ownedTill: beet.bignum;
    graceTill: beet.bignum;
    ownershipPeriodIndex: beet.bignum;
    royalties: beet.bignum;
    messageId: beet.bignum;
};
export declare const hourglassAssociatedAccountDiscriminator: number[];
/**
 * Holds the data for the {@link HourglassAssociatedAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class HourglassAssociatedAccount implements HourglassAssociatedAccountArgs {
    readonly service: boolean[];
    readonly isPublic: boolean;
    readonly auctionLength: beet.bignum;
    readonly ownershipPeriod: beet.bignum;
    readonly gracePeriod: beet.bignum;
    readonly minimumSalePrice: beet.bignum;
    readonly minimumBid: beet.bignum;
    readonly taxRate: beet.bignum;
    readonly hourglass: web3.PublicKey;
    readonly creator: web3.PublicKey;
    readonly nextAuctionId: beet.bignum;
    readonly currentOwner: web3.PublicKey;
    readonly currentPrice: beet.bignum;
    readonly ownedTill: beet.bignum;
    readonly graceTill: beet.bignum;
    readonly ownershipPeriodIndex: beet.bignum;
    readonly royalties: beet.bignum;
    readonly messageId: beet.bignum;
    private constructor();
    /**
     * Creates a {@link HourglassAssociatedAccount} instance from the provided args.
     */
    static fromArgs(args: HourglassAssociatedAccountArgs): HourglassAssociatedAccount;
    /**
     * Deserializes the {@link HourglassAssociatedAccount} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [HourglassAssociatedAccount, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link HourglassAssociatedAccount} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<HourglassAssociatedAccount>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<{
        accountDiscriminator: any;
        service: any;
        isPublic: any;
        auctionLength: any;
        ownershipPeriod: any;
        gracePeriod: any;
        minimumSalePrice: any;
        minimumBid: any;
        taxRate: any;
        hourglass: any;
        creator: any;
        nextAuctionId: any;
        currentOwner: any;
        currentPrice: any;
        ownedTill: any;
        graceTill: any;
        ownershipPeriodIndex: any;
        royalties: any;
        messageId: any;
    }>;
    /**
     * Deserializes the {@link HourglassAssociatedAccount} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [HourglassAssociatedAccount, number];
    /**
     * Serializes the {@link HourglassAssociatedAccount} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link HourglassAssociatedAccount}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link HourglassAssociatedAccount} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link HourglassAssociatedAccount} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link HourglassAssociatedAccount} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        service: boolean[];
        isPublic: boolean;
        auctionLength: number | {
            toNumber: () => number;
        };
        ownershipPeriod: number | {
            toNumber: () => number;
        };
        gracePeriod: number | {
            toNumber: () => number;
        };
        minimumSalePrice: number | {
            toNumber: () => number;
        };
        minimumBid: number | {
            toNumber: () => number;
        };
        taxRate: number | {
            toNumber: () => number;
        };
        hourglass: string;
        creator: string;
        nextAuctionId: number | {
            toNumber: () => number;
        };
        currentOwner: string;
        currentPrice: number | {
            toNumber: () => number;
        };
        ownedTill: number | {
            toNumber: () => number;
        };
        graceTill: number | {
            toNumber: () => number;
        };
        ownershipPeriodIndex: number | {
            toNumber: () => number;
        };
        royalties: number | {
            toNumber: () => number;
        };
        messageId: number | {
            toNumber: () => number;
        };
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const hourglassAssociatedAccountBeet: beet.BeetStruct<HourglassAssociatedAccount, HourglassAssociatedAccountArgs & {
    accountDiscriminator: number[];
}>;
