"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidFeeBpsError = exports.InvalidMessageOrderError = exports.OwnershipPeriodNotEndedError = exports.OwnershipPeriodEndedError = exports.WinnerMismatchError = exports.AuctionRunningError = exports.AuctionClaimedError = exports.CannotCancelWinningBidError = exports.BidTooLowError = exports.InvalidSignersError = exports.InvalidHoourglassIDError = void 0;
exports.errorFromCode = errorFromCode;
exports.errorFromName = errorFromName;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidHoourglassID: 'Invalid Hourglass ID. Make sure Hourglass ID matches total_hourglass field in main Hourglass Protocol PDA.'
 *
 * @category Errors
 * @category generated
 */
class InvalidHoourglassIDError extends Error {
    constructor() {
        super('Invalid Hourglass ID. Make sure Hourglass ID matches total_hourglass field in main Hourglass Protocol PDA.');
        this.code = 0x1770;
        this.name = 'InvalidHoourglassID';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidHoourglassIDError);
        }
    }
}
exports.InvalidHoourglassIDError = InvalidHoourglassIDError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidHoourglassIDError());
createErrorFromNameLookup.set('InvalidHoourglassID', () => new InvalidHoourglassIDError());
/**
 * InvalidSigners: 'Invalid signers. Make sure Hourglass mint is signing the transaction.'
 *
 * @category Errors
 * @category generated
 */
class InvalidSignersError extends Error {
    constructor() {
        super('Invalid signers. Make sure Hourglass mint is signing the transaction.');
        this.code = 0x1771;
        this.name = 'InvalidSigners';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidSignersError);
        }
    }
}
exports.InvalidSignersError = InvalidSignersError;
createErrorFromCodeLookup.set(0x1771, () => new InvalidSignersError());
createErrorFromNameLookup.set('InvalidSigners', () => new InvalidSignersError());
/**
 * BidTooLow: 'Bid value is too low.'
 *
 * @category Errors
 * @category generated
 */
class BidTooLowError extends Error {
    constructor() {
        super('Bid value is too low.');
        this.code = 0x1772;
        this.name = 'BidTooLow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, BidTooLowError);
        }
    }
}
exports.BidTooLowError = BidTooLowError;
createErrorFromCodeLookup.set(0x1772, () => new BidTooLowError());
createErrorFromNameLookup.set('BidTooLow', () => new BidTooLowError());
/**
 * CannotCancelWinningBid: 'Winning bid cannot be cancelled.'
 *
 * @category Errors
 * @category generated
 */
class CannotCancelWinningBidError extends Error {
    constructor() {
        super('Winning bid cannot be cancelled.');
        this.code = 0x1773;
        this.name = 'CannotCancelWinningBid';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CannotCancelWinningBidError);
        }
    }
}
exports.CannotCancelWinningBidError = CannotCancelWinningBidError;
createErrorFromCodeLookup.set(0x1773, () => new CannotCancelWinningBidError());
createErrorFromNameLookup.set('CannotCancelWinningBid', () => new CannotCancelWinningBidError());
/**
 * AuctionClaimed: 'Auction already claimed.'
 *
 * @category Errors
 * @category generated
 */
class AuctionClaimedError extends Error {
    constructor() {
        super('Auction already claimed.');
        this.code = 0x1774;
        this.name = 'AuctionClaimed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AuctionClaimedError);
        }
    }
}
exports.AuctionClaimedError = AuctionClaimedError;
createErrorFromCodeLookup.set(0x1774, () => new AuctionClaimedError());
createErrorFromNameLookup.set('AuctionClaimed', () => new AuctionClaimedError());
/**
 * AuctionRunning: 'Auction has not been ended yet.'
 *
 * @category Errors
 * @category generated
 */
class AuctionRunningError extends Error {
    constructor() {
        super('Auction has not been ended yet.');
        this.code = 0x1775;
        this.name = 'AuctionRunning';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AuctionRunningError);
        }
    }
}
exports.AuctionRunningError = AuctionRunningError;
createErrorFromCodeLookup.set(0x1775, () => new AuctionRunningError());
createErrorFromNameLookup.set('AuctionRunning', () => new AuctionRunningError());
/**
 * WinnerMismatch: 'This user is not authorized to claim the auction.'
 *
 * @category Errors
 * @category generated
 */
class WinnerMismatchError extends Error {
    constructor() {
        super('This user is not authorized to claim the auction.');
        this.code = 0x1776;
        this.name = 'WinnerMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WinnerMismatchError);
        }
    }
}
exports.WinnerMismatchError = WinnerMismatchError;
createErrorFromCodeLookup.set(0x1776, () => new WinnerMismatchError());
createErrorFromNameLookup.set('WinnerMismatch', () => new WinnerMismatchError());
/**
 * OwnershipPeriodEnded: 'Ownership period for this user has ended.'
 *
 * @category Errors
 * @category generated
 */
class OwnershipPeriodEndedError extends Error {
    constructor() {
        super('Ownership period for this user has ended.');
        this.code = 0x1777;
        this.name = 'OwnershipPeriodEnded';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, OwnershipPeriodEndedError);
        }
    }
}
exports.OwnershipPeriodEndedError = OwnershipPeriodEndedError;
createErrorFromCodeLookup.set(0x1777, () => new OwnershipPeriodEndedError());
createErrorFromNameLookup.set('OwnershipPeriodEnded', () => new OwnershipPeriodEndedError());
/**
 * OwnershipPeriodNotEnded: 'Ownership period has not ended yet. Tax cannot be validated before the end of ownership period.'
 *
 * @category Errors
 * @category generated
 */
class OwnershipPeriodNotEndedError extends Error {
    constructor() {
        super('Ownership period has not ended yet. Tax cannot be validated before the end of ownership period.');
        this.code = 0x1778;
        this.name = 'OwnershipPeriodNotEnded';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, OwnershipPeriodNotEndedError);
        }
    }
}
exports.OwnershipPeriodNotEndedError = OwnershipPeriodNotEndedError;
createErrorFromCodeLookup.set(0x1778, () => new OwnershipPeriodNotEndedError());
createErrorFromNameLookup.set('OwnershipPeriodNotEnded', () => new OwnershipPeriodNotEndedError());
/**
 * InvalidMessageOrder: 'Invalid message ID provided in the instruction. Messages have to be inserted in a correct order.'
 *
 * @category Errors
 * @category generated
 */
class InvalidMessageOrderError extends Error {
    constructor() {
        super('Invalid message ID provided in the instruction. Messages have to be inserted in a correct order.');
        this.code = 0x1779;
        this.name = 'InvalidMessageOrder';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMessageOrderError);
        }
    }
}
exports.InvalidMessageOrderError = InvalidMessageOrderError;
createErrorFromCodeLookup.set(0x1779, () => new InvalidMessageOrderError());
createErrorFromNameLookup.set('InvalidMessageOrder', () => new InvalidMessageOrderError());
/**
 * InvalidFeeBps: 'InvalidFeeBps'
 *
 * @category Errors
 * @category generated
 */
class InvalidFeeBpsError extends Error {
    constructor() {
        super('InvalidFeeBps');
        this.code = 0x177a;
        this.name = 'InvalidFeeBps';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidFeeBpsError);
        }
    }
}
exports.InvalidFeeBpsError = InvalidFeeBpsError;
createErrorFromCodeLookup.set(0x177a, () => new InvalidFeeBpsError());
createErrorFromNameLookup.set('InvalidFeeBps', () => new InvalidFeeBpsError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
